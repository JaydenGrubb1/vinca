diff --git b/clients/roscpp/CHANGELOG.rst a/clients/roscpp/CHANGELOG.rst
index 1750f82e5..e99e8731a 100644
--- b/clients/roscpp/CHANGELOG.rst
+++ a/clients/roscpp/CHANGELOG.rst
@@ -2,11 +2,6 @@
 Changelog for package roscpp
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-* fix subscription busy wait melodic (`#1684 <https://github.com/ros/ros_comm/issues/1684>`_, `#2014 <https://github.com/ros/ros_comm/issues/2014>`_)
-* use an internal implementation of boost::condition_variable with monotonic clock (`#1932 <https://github.com/ros/ros_comm/issues/1932>`_)
-
 1.14.6 (2020-05-29)
 -------------------
 * fix a bug that using a destroyed connection object (`#1950 <https://github.com/ros/ros_comm/issues/1950>`_)
diff --git b/clients/roscpp/CMakeLists.txt a/clients/roscpp/CMakeLists.txt
index fe506f1ff..b5ef3ff1b 100644
--- b/clients/roscpp/CMakeLists.txt
+++ a/clients/roscpp/CMakeLists.txt
@@ -24,6 +24,18 @@ configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/ros/common.h.in ${CATKIN_DEVE
 
 find_package(Boost REQUIRED COMPONENTS chrono filesystem system)
 
+# Make sure we use CLOCK_MONOTONIC for the condition variable wait_for if not Apple.
+if(NOT APPLE AND NOT WIN32)
+  if(Boost_VERSION LESS 106100)
+    message(FATAL_ERROR "${PROJECT_NAME} requires Boost 1.61 or above.")
+  endif()
+  if(Boost_VERSION LESS 106700)
+    # CLOCK_MONOTONIC became the default in Boost 1.67:
+    # https://github.com/boostorg/thread/commit/1e84b978b2bb0aae830cc14533dea3b7ddda5cde
+    add_definitions(-DBOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC)
+  endif()
+endif()
+
 include_directories(include ${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION}/ros ${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})
 # this is needed for use within a bazel workspace. See #1548 for details.
 include_directories(${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION})
diff --git b/clients/roscpp/include/ros/callback_queue.h a/clients/roscpp/include/ros/callback_queue.h
index 1881f1cf9..19de853a4 100644
--- b/clients/roscpp/include/ros/callback_queue.h
+++ a/clients/roscpp/include/ros/callback_queue.h
@@ -36,11 +36,11 @@
 #define ROSCPP_CALLBACK_QUEUE_H
 
 #include "ros/callback_queue_interface.h"
-#include "ros/internal/condition_variable.h"
 #include "ros/time.h"
 #include "common.h"
 
 #include <boost/shared_ptr.hpp>
+#include <boost/thread/condition_variable.hpp>
 #include <boost/thread/mutex.hpp>
 #include <boost/thread/shared_mutex.hpp>
 #include <boost/thread/tss.hpp>
@@ -163,7 +163,7 @@ protected:
   D_CallbackInfo callbacks_;
   size_t calling_;
   boost::mutex mutex_;
-  ros::internal::condition_variable_monotonic condition_;
+  boost::condition_variable condition_;
 
   boost::mutex id_info_mutex_;
   M_IDInfo id_info_;
diff --git b/clients/roscpp/include/ros/internal/condition_variable.h a/clients/roscpp/include/ros/internal/condition_variable.h
deleted file mode 100644
index 98b9289da..000000000
--- b/clients/roscpp/include/ros/internal/condition_variable.h
+++ /dev/null
@@ -1,221 +0,0 @@
-/*
- * Copyright (C) 2020, Willow Garage, Inc.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *   * Redistributions of source code must retain the above copyright notice,
- *     this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in the
- *     documentation and/or other materials provided with the distribution.
- *   * Neither the names of Stanford University or Willow Garage, Inc. nor the names of its
- *     contributors may be used to endorse or promote products derived from
- *     this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-// Distributed under the Boost Software License, Version 1.0. (See
-// accompanying file LICENSE_1_0.txt or copy at
-// http://www.boost.org/LICENSE_1_0.txt)
-// (C) Copyright 2007-10 Anthony Williams
-// (C) Copyright 2011-2012 Vicente J. Botet Escriba
-
-#ifndef ROSCPP_INTERNAL_CONDITION_VARIABLE_H
-#define ROSCPP_INTERNAL_CONDITION_VARIABLE_H
-
-#include <boost/thread/condition_variable.hpp>
-
-namespace ros {
-namespace internal {
-
-#if !defined(BOOST_THREAD_PLATFORM_PTHREAD) || \
-    defined(BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC) || \
-    defined(BOOST_THREAD_INTERNAL_CLOCK_IS_MONO)
-using condition_variable_monotonic = boost::condition_variable;
-
-#else
-
-class condition_variable_monotonic {
-private:
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-  pthread_mutex_t internal_mutex;
-#endif
-  pthread_cond_t cond;
-
-public:
-  condition_variable_monotonic() {
-    int res;
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-    res = pthread_mutex_init(&internal_mutex, NULL);
-    if (res)
-    {
-      boost::throw_exception(boost::thread_resource_error(res, "ros::internal::condition_variable_monotonic::condition_variable_monotonic() constructor failed in pthread_mutex_init"));
-    }
-#endif
-
-    // res = boost::detail::monotonic_pthread_cond_init(cond);
-    pthread_condattr_t attr;
-    res = pthread_condattr_init(&attr);
-    if (res == 0) {
-      pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);
-      res = pthread_cond_init(&cond, &attr);
-      pthread_condattr_destroy(&attr);
-    }
-
-    if (res)
-    {
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-      BOOST_VERIFY(!pthread_mutex_destroy(&internal_mutex));
-#endif
-      boost::throw_exception(boost::thread_resource_error(res, "ros::internal::condition_variable_monotonic::condition_variable() constructor failed in detail::monotonic_pthread_cond_init"));
-    }
-  }
-
-  void notify_one() BOOST_NOEXCEPT
-  {
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-    boost::pthread::pthread_mutex_scoped_lock internal_lock(&internal_mutex);
-#endif
-    BOOST_VERIFY(!pthread_cond_signal(&cond));
-  }
-
-  void notify_all() BOOST_NOEXCEPT
-  {
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-    boost::pthread::pthread_mutex_scoped_lock internal_lock(&internal_mutex);
-#endif
-    BOOST_VERIFY(!pthread_cond_broadcast(&cond));
-  }
-
-  template <class Duration>
-  boost::cv_status wait_until(
-      boost::unique_lock<boost::mutex> &lock,
-      const boost::chrono::time_point<boost::chrono::steady_clock, Duration> &t)
-  {
-    using namespace boost::chrono;
-    typedef time_point<steady_clock, nanoseconds> nano_sys_tmpt;
-    wait_until(lock,
-               nano_sys_tmpt(ceil<nanoseconds>(t.time_since_epoch())));
-    return steady_clock::now() < t ? boost::cv_status::no_timeout : boost::cv_status::timeout;
-  }
-
-  template <class Clock, class Duration>
-  boost::cv_status wait_until(
-      boost::unique_lock<boost::mutex> &lock,
-      const boost::chrono::time_point<Clock, Duration> &t)
-  {
-    using namespace boost::chrono;
-    steady_clock::time_point s_now = steady_clock::now();
-    typename Clock::time_point c_now = Clock::now();
-    wait_until(lock, s_now + ceil<nanoseconds>(t - c_now));
-    return Clock::now() < t ? boost::cv_status::no_timeout : boost::cv_status::timeout;
-  }
-
-  template <class Rep, class Period>
-  boost::cv_status wait_for(
-      boost::unique_lock<boost::mutex> &lock,
-      const boost::chrono::duration<Rep, Period> &d)
-  {
-    using namespace boost::chrono;
-    steady_clock::time_point c_now = steady_clock::now();
-    wait_until(lock, c_now + ceil<nanoseconds>(d));
-    return steady_clock::now() - c_now < d ? boost::cv_status::no_timeout : boost::cv_status::timeout;
-  }
-
-  boost::cv_status wait_until(
-      boost::unique_lock<boost::mutex> &lk,
-      boost::chrono::time_point<boost::chrono::steady_clock, boost::chrono::nanoseconds> tp)
-  {
-    using namespace boost::chrono;
-    nanoseconds d = tp.time_since_epoch();
-    timespec ts = boost::detail::to_timespec(d);
-    if (do_wait_until(lk, ts))
-      return boost::cv_status::no_timeout;
-    else
-      return boost::cv_status::timeout;
-  }
-
-  void wait(boost::unique_lock<boost::mutex> &m)
-  {
-    int res = 0;
-    {
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-      boost::thread_cv_detail::lock_on_exit<boost::unique_lock<boost::mutex>> guard;
-      boost::detail::interruption_checker check_for_interruption(&internal_mutex, &cond);
-      pthread_mutex_t *the_mutex = &internal_mutex;
-      guard.activate(m);
-      res = pthread_cond_wait(&cond, the_mutex);
-#if BOOST_VERSION >= 106500
-      check_for_interruption.check();
-      guard.deactivate();
-#endif
-#else
-      pthread_mutex_t *the_mutex = m.mutex()->native_handle();
-      res = pthread_cond_wait(&cond, the_mutex);
-#endif
-    }
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-    boost::this_thread::interruption_point();
-#endif
-    if (res && res != EINTR)
-    {
-      boost::throw_exception(boost::condition_error(res, "ros::internal::condition_variable_monotonic::wait failed in pthread_cond_wait"));
-    }
-  }
-
-  bool do_wait_until(
-      boost::unique_lock<boost::mutex> &m,
-      struct timespec const &timeout)
-  {
-    int cond_res;
-    {
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-      boost::thread_cv_detail::lock_on_exit<boost::unique_lock<boost::mutex>> guard;
-      boost::detail::interruption_checker check_for_interruption(&internal_mutex, &cond);
-      pthread_mutex_t *the_mutex = &internal_mutex;
-      guard.activate(m);
-      cond_res = pthread_cond_timedwait(&cond, the_mutex, &timeout);
-#if BOOST_VERSION >= 106500
-      check_for_interruption.check();
-      guard.deactivate();
-#endif
-#else
-      pthread_mutex_t *the_mutex = m.mutex()->native_handle();
-      cond_res = pthread_cond_timedwait(&cond, the_mutex, &timeout);
-#endif
-    }
-#if defined BOOST_THREAD_PROVIDES_INTERRUPTIONS
-    boost::this_thread::interruption_point();
-#endif
-    if (cond_res == ETIMEDOUT)
-    {
-      return false;
-    }
-    if (cond_res)
-    {
-      boost::throw_exception(boost::condition_error(cond_res, "ros::internal::condition_variable_monotonic::do_wait_until failed in pthread_cond_timedwait"));
-    }
-    return true;
-  }
-};
-static_assert(
-    sizeof(condition_variable_monotonic) == sizeof(boost::condition_variable),
-    "sizeof(ros::internal::condition_variable_monotonic) != sizeof(boost::condition_variable)");
-
-#endif
-
-}  // namespace internal
-}  // namespaec ros
-
-#endif  // ROSCPP_INTERNAL_CONDITION_VARIABLE_H
\ No newline at end of file
diff --git b/clients/roscpp/include/ros/rosout_appender.h a/clients/roscpp/include/ros/rosout_appender.h
index 032fd5a27..7253ffc4e 100644
--- b/clients/roscpp/include/ros/rosout_appender.h
+++ a/clients/roscpp/include/ros/rosout_appender.h
@@ -38,9 +38,8 @@
 #include <ros/message_forward.h>
 #include "common.h"
 
-#include "ros/internal/condition_variable.h"
-
 #include <boost/shared_ptr.hpp>
+#include <boost/thread/condition_variable.hpp>
 #include <boost/weak_ptr.hpp>
 
 #include <boost/thread.hpp>
@@ -75,7 +74,7 @@ protected:
   typedef std::vector<rosgraph_msgs::LogPtr> V_Log;
   V_Log log_queue_;
   boost::mutex queue_mutex_;
-  ros::internal::condition_variable_monotonic queue_condition_;
+  boost::condition_variable queue_condition_;
   bool shutting_down_;
   bool disable_topics_;
 
diff --git b/clients/roscpp/include/ros/service_server_link.h a/clients/roscpp/include/ros/service_server_link.h
index 22258c5f8..e3e3bfca4 100644
--- b/clients/roscpp/include/ros/service_server_link.h
+++ a/clients/roscpp/include/ros/service_server_link.h
@@ -36,8 +36,8 @@
 #define ROSCPP_SERVICE_SERVER_LINK_H
 
 #include "ros/common.h"
-#include "ros/internal/condition_variable.h"
 
+#include <boost/thread/condition_variable.hpp>
 #include <boost/thread/mutex.hpp>
 #include <boost/shared_array.hpp>
 #include <boost/enable_shared_from_this.hpp>
@@ -65,7 +65,7 @@ private:
     SerializedMessage* resp_;
 
     bool finished_;
-    ros::internal::condition_variable_monotonic finished_condition_;
+    boost::condition_variable finished_condition_;
     boost::mutex finished_mutex_;
     boost::thread::id caller_thread_id_;
 
diff --git b/clients/roscpp/include/ros/timer_manager.h a/clients/roscpp/include/ros/timer_manager.h
index a938ae6d5..2d76aba3b 100644
--- b/clients/roscpp/include/ros/timer_manager.h
+++ a/clients/roscpp/include/ros/timer_manager.h
@@ -32,13 +32,13 @@
 #include "ros/time.h"
 #include "ros/file_log.h"
 
+#include <boost/thread/condition_variable.hpp>
 #include <boost/thread/thread.hpp>
 #include <boost/thread/mutex.hpp>
 #include <boost/thread/recursive_mutex.hpp>
 
 #include "ros/assert.h"
 #include "ros/callback_queue_interface.h"
-#include "ros/internal/condition_variable.h"
 
 #include <vector>
 #include <list>
@@ -130,7 +130,7 @@ private:
 
   V_TimerInfo timers_;
   boost::mutex timers_mutex_;
-  ros::internal::condition_variable_monotonic timers_cond_;
+  boost::condition_variable timers_cond_;
   volatile bool new_timer_;
 
   boost::mutex waiting_mutex_;
@@ -233,7 +233,15 @@ private:
 template<class T, class D, class E>
 TimerManager<T, D, E>::TimerManager() :
   new_timer_(false), id_counter_(0), thread_started_(false), quit_(false)
-{}
+{
+#if !defined(BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC) && !defined(BOOST_THREAD_INTERNAL_CLOCK_IS_MONO)
+  ROS_ASSERT_MSG(false,
+                 "ros::TimerManager was instantiated by package " ROS_PACKAGE_NAME ", but "
+                 "neither BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC nor BOOST_THREAD_INTERNAL_CLOCK_IS_MONO is defined! "
+                 "Be aware that timers might misbehave when system time jumps, "
+                 "e.g. due to network time corrections.");
+#endif
+}
 
 template<class T, class D, class E>
 TimerManager<T, D, E>::~TimerManager()
diff --git b/clients/roscpp/include/ros/transport/transport.h a/clients/roscpp/include/ros/transport/transport.h
index 595729d49..e85635829 100644
--- b/clients/roscpp/include/ros/transport/transport.h
+++ a/clients/roscpp/include/ros/transport/transport.h
@@ -35,7 +35,6 @@
 #ifndef ROSCPP_TRANSPORT_H
 #define ROSCPP_TRANSPORT_H
 
-#include <ros/common.h>
 #include <ros/types.h>
 #include <boost/function.hpp>
 #include <boost/shared_ptr.hpp>
@@ -53,7 +52,7 @@ class Header;
 /**
  * \brief Abstract base class that allows abstraction of the transport type, eg. TCP, shared memory, UDP...
  */
-class ROSCPP_DECL Transport : public boost::enable_shared_from_this<Transport>
+class Transport : public boost::enable_shared_from_this<Transport>
 {
 public:
   Transport();
diff --git b/clients/roscpp/package.xml a/clients/roscpp/package.xml
index 692fb9cc7..f88bfe5f2 100644
--- b/clients/roscpp/package.xml
+++ a/clients/roscpp/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>roscpp</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     roscpp is a C++ implementation of ROS. It provides
     a <a href="http://wiki.ros.org/Client%20Libraries">client
diff --git b/clients/roscpp/src/libros/callback_queue.cpp a/clients/roscpp/src/libros/callback_queue.cpp
index d0ffd7477..c38fcbde9 100644
--- b/clients/roscpp/src/libros/callback_queue.cpp
+++ a/clients/roscpp/src/libros/callback_queue.cpp
@@ -124,10 +124,7 @@ void CallbackQueue::addCallback(const CallbackInterfacePtr& callback, uint64_t r
     callbacks_.push_back(info);
   }
 
-  if (callback->ready())
-  {
-    condition_.notify_one();
-  }
+  condition_.notify_one();
 }
 
 CallbackQueue::IDInfoPtr CallbackQueue::getIDInfo(uint64_t id)
@@ -228,39 +225,11 @@ CallbackQueue::CallOneResult CallbackQueue::callOne(ros::WallDuration timeout)
       return Disabled;
     }
 
-    boost::chrono::steady_clock::time_point wait_until =
-        boost::chrono::steady_clock::now() + boost::chrono::nanoseconds(timeout.toNSec());
-    while (!cb_info.callback) {
-      D_CallbackInfo::iterator it = callbacks_.begin();
-      for (; it != callbacks_.end();)
-      {
-        CallbackInfo& info = *it;
-
-        if (info.marked_for_removal)
-        {
-          it = callbacks_.erase(it);
-          continue;
-        }
-
-        if (info.callback->ready())
-        {
-          cb_info = info;
-          it = callbacks_.erase(it);
-          break;
-        }
-
-        ++it;
-      }
-
-      // Found a ready callback?
-      if (cb_info.callback) {
-        break;
-      }
-
-      boost::cv_status wait_status = boost::cv_status::timeout;
+    if (callbacks_.empty())
+    {
       if (!timeout.isZero())
       {
-        wait_status = condition_.wait_until(lock, wait_until);
+        condition_.wait_for(lock, boost::chrono::nanoseconds(timeout.toNSec()));
       }
 
       if (callbacks_.empty())
@@ -272,11 +241,32 @@ CallbackQueue::CallOneResult CallbackQueue::callOne(ros::WallDuration timeout)
       {
         return Disabled;
       }
+    }
+
+    D_CallbackInfo::iterator it = callbacks_.begin();
+    for (; it != callbacks_.end();)
+    {
+      CallbackInfo& info = *it;
 
-      if (wait_status == boost::cv_status::timeout)
+      if (info.marked_for_removal)
       {
-        return TryAgain;
+        it = callbacks_.erase(it);
+        continue;
       }
+
+      if (info.callback->ready())
+      {
+        cb_info = info;
+        it = callbacks_.erase(it);
+        break;
+      }
+
+      ++it;
+    }
+
+    if (!cb_info.callback)
+    {
+      return TryAgain;
     }
 
     ++calling_;
@@ -401,10 +391,6 @@ CallbackQueue::CallOneResult CallbackQueue::callOneCB(TLS* tls)
       {
         tls->cb_it = tls->callbacks.erase(tls->cb_it);
         result = cb->call();
-        if (result == CallbackInterface::Success)
-        {
-          condition_.notify_one();
-        }
       }
     }
 
diff --git b/clients/roscpp/src/libros/subscription_queue.cpp a/clients/roscpp/src/libros/subscription_queue.cpp
index 5f1117a5c..67b325506 100644
--- b/clients/roscpp/src/libros/subscription_queue.cpp
+++ a/clients/roscpp/src/libros/subscription_queue.cpp
@@ -169,12 +169,7 @@ CallbackInterface::CallResult SubscriptionQueue::call()
 
 bool SubscriptionQueue::ready()
 {
-  if (allow_concurrent_callbacks_)
-  {
-    return true;
-  }
-  boost::recursive_mutex::scoped_try_lock lock(callback_mutex_, boost::try_to_lock);
-  return lock.owns_lock();
+  return true;
 }
 
 bool SubscriptionQueue::full()
diff --git b/clients/rospy/CHANGELOG.rst a/clients/rospy/CHANGELOG.rst
index 439a6fd00..76a740c70 100644
--- b/clients/rospy/CHANGELOG.rst
+++ a/clients/rospy/CHANGELOG.rst
@@ -2,10 +2,6 @@
 Changelog for package rospy
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-* remove not existing NodeProxy from rospy __all_\_ (`#2007 <https://github.com/ros/ros_comm/issues/2007>`_)
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/clients/rospy/package.xml a/clients/rospy/package.xml
index 3b2081d0c..c75e241d2 100644
--- b/clients/rospy/package.xml
+++ a/clients/rospy/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>rospy</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rospy is a pure Python client library for ROS. The rospy client
     API enables Python programmers to quickly interface with ROS <a
diff --git b/ros_comm/CHANGELOG.rst a/ros_comm/CHANGELOG.rst
index eb947402b..fce707cd0 100644
--- b/ros_comm/CHANGELOG.rst
+++ a/ros_comm/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package ros_comm
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/ros_comm/package.xml a/ros_comm/package.xml
index b934e21e0..2725190aa 100644
--- b/ros_comm/package.xml
+++ a/ros_comm/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>ros_comm</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     ROS communications-related packages, including core client libraries (roscpp, rospy) and graph introspection tools (rostopic, rosnode, rosservice, rosparam).
   </description>
diff --git b/test/test_rosbag/package.xml a/test/test_rosbag/package.xml
index acad71309..6cfc04842 100644
--- b/test/test_rosbag/package.xml
+++ a/test/test_rosbag/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>test_rosbag</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     A package containing the unit tests for rosbag.
   </description>
diff --git b/test/test_rosbag_storage/package.xml a/test/test_rosbag_storage/package.xml
index 7846cc999..4801e9e5d 100644
--- b/test/test_rosbag_storage/package.xml
+++ a/test/test_rosbag_storage/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_rosbag_storage</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     A package containing the unit tests for rosbag_storage.
   </description>
diff --git b/test/test_roscpp/package.xml a/test/test_roscpp/package.xml
index 59d48a0fa..81ae2e0a0 100644
--- b/test/test_roscpp/package.xml
+++ a/test/test_roscpp/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_roscpp</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tests for roscpp which depend on rostest.
   </description>
diff --git b/test/test_roscpp/test/fake_message.h a/test/test_roscpp/test/fake_message.h
deleted file mode 100644
index 3e5876712..000000000
--- b/test/test_roscpp/test/fake_message.h
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (c) 2009, Willow Garage, Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- *     * Neither the name of Willow Garage, Inc. nor the names of its
- *       contributors may be used to endorse or promote products derived from
- *       this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-/* Author: Josh Faust */
-
-/*
- * Subscription queue test helper classes
- */
-#ifndef TEST_ROSCPP_FAKE_MESSAGE_H
-#define TEST_ROSCPP_FAKE_MESSAGE_H
-
-#include "ros/subscription_callback_helper.h"
-
-class FakeMessage
-{
-public:
-  virtual const std::string __getDataType() const { return ""; }
-  virtual const std::string __getMD5Sum() const { return ""; }
-  virtual const std::string __getMessageDefinition() const { return ""; }
-  virtual uint32_t serializationLength() const { return 0; }
-  virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const { (void)seq; return write_ptr; }
-  virtual uint8_t *deserialize(uint8_t *read_ptr) { return read_ptr; }
-};
-
-class FakeSubHelper : public ros::SubscriptionCallbackHelper
-{
-public:
-  FakeSubHelper()
-    : calls_(0)
-  {}
-
-  virtual ros::VoidConstPtr deserialize(const ros::SubscriptionCallbackHelperDeserializeParams&)
-  {
-    return boost::make_shared<FakeMessage>();
-  }
-
-  virtual std::string getMD5Sum() { return ""; }
-  virtual std::string getDataType() { return ""; }
-
-  virtual void call(ros::SubscriptionCallbackHelperCallParams& params)
-  {
-    (void)params;
-    {
-      boost::mutex::scoped_lock lock(mutex_);
-      ++calls_;
-    }
-
-    if (cb_)
-    {
-      cb_();
-    }
-  }
-
-  virtual const std::type_info& getTypeInfo() { return typeid(FakeMessage); }
-  virtual bool isConst() { return true; }
-  virtual bool hasHeader() { return false; }
-
-  boost::mutex mutex_;
-  uint32_t calls_;
-
-  boost::function<void(void)> cb_;
-};
-typedef boost::shared_ptr<FakeSubHelper> FakeSubHelperPtr;
-
-#endif // TEST_ROSCPP_FAKE_MESSAGE_H
diff --git b/test/test_roscpp/test/test_callback_queue.cpp a/test/test_roscpp/test/test_callback_queue.cpp
index 648fb6ac8..b1c51a79e 100644
--- b/test/test_roscpp/test/test_callback_queue.cpp
+++ a/test/test_roscpp/test/test_callback_queue.cpp
@@ -36,9 +36,6 @@
 #include <gtest/gtest.h>
 #include <ros/callback_queue.h>
 #include <ros/console.h>
-#include <ros/message_deserializer.h>
-#include <ros/subscription_queue.h>
-#include <ros/subscription_callback_helper.h>
 #include <ros/timer.h>
 
 #include <boost/atomic.hpp>
@@ -47,8 +44,6 @@
 #include <boost/thread.hpp>
 #include <boost/function.hpp>
 
-#include "fake_message.h"
-
 using namespace ros;
 
 class CountingCallback : public CallbackInterface
@@ -263,51 +258,31 @@ TEST(CallbackQueue, recursive4)
   EXPECT_EQ(cb->count, 3U);
 }
 
-void callAvailableThread(
-  CallbackQueue* queue, bool& done, boost::atomic<size_t>* num_calls,
-  ros::WallDuration call_timeout = ros::WallDuration(0.1))
+void callAvailableThread(CallbackQueue* queue, bool& done)
 {
-  size_t i = 0;
   while (!done)
   {
-    queue->callAvailable(call_timeout);
-    ++i;
-  }
-
-  if (num_calls)
-  {
-    num_calls->fetch_add(i);
+    queue->callAvailable(ros::WallDuration(0.1));
   }
 }
 
-size_t runThreadedTest(
-  const CallbackInterfacePtr& cb,
-  const boost::function<void(CallbackQueue*, bool&, boost::atomic<size_t>*, ros::WallDuration)>& threadFunc,
-  size_t* num_calls = NULL, size_t num_threads = 10,
-  ros::WallDuration duration = ros::WallDuration(5),
-  ros::WallDuration pause_between_callbacks = ros::WallDuration(0),
-  ros::WallDuration call_one_timeout = ros::WallDuration(0.1))
+size_t runThreadedTest(const CountingCallbackPtr& cb, const boost::function<void(CallbackQueue*, bool&)>& threadFunc)
 {
   CallbackQueue queue;
   boost::thread_group tg;
   bool done = false;
-  boost::atomic<size_t> calls(0);
 
-  for (uint32_t i = 0; i < num_threads; ++i)
+  for (uint32_t i = 0; i < 10; ++i)
   {
-    tg.create_thread(boost::bind(threadFunc, &queue, boost::ref(done), &calls, call_one_timeout));
+    tg.create_thread(boost::bind(threadFunc, &queue, boost::ref(done)));
   }
 
   ros::WallTime start = ros::WallTime::now();
   size_t i = 0;
-  while (ros::WallTime::now() - start < duration)
+  while (ros::WallTime::now() - start < ros::WallDuration(5))
   {
     queue.addCallback(cb);
     ++i;
-    if (!pause_between_callbacks.isZero())
-    {
-      pause_between_callbacks.sleep();
-    }
   }
 
   while (!queue.isEmpty())
@@ -318,9 +293,6 @@ size_t runThreadedTest(
   done = true;
   tg.join_all();
 
-  if (num_calls)
-    *num_calls = calls;
-
   return i;
 }
 
@@ -332,20 +304,11 @@ TEST(CallbackQueue, threadedCallAvailable)
   EXPECT_EQ(cb->count, i);
 }
 
-void callOneThread(
-  CallbackQueue* queue, bool& done, boost::atomic<size_t>* num_calls,
-  ros::WallDuration timeout = ros::WallDuration(0.1))
+void callOneThread(CallbackQueue* queue, bool& done)
 {
-  size_t i = 0;
   while (!done)
   {
-    queue->callOne(timeout);
-    ++i;
-  }
-
-  if (num_calls)
-  {
-    num_calls->fetch_add(i);
+    queue->callOne(ros::WallDuration(0.1));
   }
 }
 
@@ -357,112 +320,6 @@ TEST(CallbackQueue, threadedCallOne)
   EXPECT_EQ(cb->count, i);
 }
 
-class CountingSubscriptionQueue : public SubscriptionQueue
-{
-public:
-  CountingSubscriptionQueue(
-    const std::string& topic, int32_t queue_size,
-    bool allow_concurrent_callbacks)
-  : SubscriptionQueue(topic, queue_size, allow_concurrent_callbacks),
-    ready_count(0)
-  {}
-
-  virtual bool ready()
-  {
-    ready_count.fetch_add(1);
-    return SubscriptionQueue::ready();
-  }
-
-  boost::atomic<size_t> ready_count;
-};
-typedef boost::shared_ptr<CountingSubscriptionQueue> CountingSubscriptionQueuePtr;
-
-struct ThreadedCallOneSlowParams {
-  ros::WallDuration callback_duration; // long-lasting callback
-  size_t num_threads;
-  ros::WallDuration call_one_timeout;
-  ros::WallDuration test_duration;
-  ros::WallDuration pause_between_callbacks;
-};
-
-class CallbackQueueParamTest : public ::testing::TestWithParam<ThreadedCallOneSlowParams>
-{};
-
-TEST_P(CallbackQueueParamTest, threadedCallOneSlow)
-{
-  // test for https://github.com/ros/ros_comm/issues/1545
-  // "roscpp multithreaded spinners eat up CPU when callbacks take too long"
-
-  const ThreadedCallOneSlowParams param = GetParam();
-  const WallDuration& callback_duration = param.callback_duration; // long-lasting callback
-  const size_t num_threads = param.num_threads;
-  const ros::WallDuration call_one_timeout = param.call_one_timeout;
-  const ros::WallDuration test_duration = param.test_duration;
-  const ros::WallDuration pause_between_callbacks = param.pause_between_callbacks;
-  // queue_size is chosen such that it is larger than the max number of callbacks we
-  // are really able to process in 5 secs (since allow_concurrent_callbacks is false,
-  // it is equal to the number of seconds the queue is running)
-  const size_t queue_size = static_cast<size_t>(test_duration.toSec()) + 1;
-
-  // create a subscription queue counting the number of ready() calls
-  const CountingSubscriptionQueuePtr cb(
-    boost::make_shared<CountingSubscriptionQueue>("test", queue_size, false));
-
-  // create a slow subscription callback (takes 1 second to complete)
-  const FakeSubHelperPtr helper(boost::make_shared<FakeSubHelper>());
-  helper->cb_ = boost::bind(&ros::WallDuration::sleep, callback_duration);
-  const MessageDeserializerPtr des(boost::make_shared<MessageDeserializer>(
-    helper, SerializedMessage(), boost::shared_ptr<M_string>()));
-
-  // fill the subscription queue to get max performance
-  for (size_t i = 0; i < queue_size; ++i)
-  {
-    cb->push(helper, des, false, VoidConstWPtr(), true);
-  }
-
-  // keep filling the callback queue at maximum speed for 5 seconds and
-  // spin up 10 processing threads until the queue is empty
-  size_t num_call_one_calls = 0;
-  const size_t num_callbacks_to_call = runThreadedTest(
-    cb, callOneThread, &num_call_one_calls,
-    num_threads, test_duration, pause_between_callbacks, call_one_timeout);
-
-  const uint32_t num_callbacks_called = helper->calls_;
-  const size_t num_ready_called = cb->ready_count;
-
-  // what should happen: even though we have multiple processing threads,
-  // the subscription queue has a per-topic lock which prevents multiple threads from
-  // processing the topic's callbacks simultaneously; so even though there were
-  // tens of thousands of callbacks in the callback queue, we only got time to process
-  // less than 5 of them because queue_size is quite limited (3), so most callbacks
-  // get thrown away during processing of the slow callbacks
-
-  // we test the number of SubscriptionQueue::ready() calls to see how often do the
-  // idle threads ask for more work; with bug 1545 unfixed, this gets to millions of
-  // calls which acts as a busy-wait; with the bug fixed, the number should not be
-  // higher than number of callbacks (~ 80k), since each newly added callback should
-  // wake one idle thread and let it ask for work
-
-  ROS_INFO_STREAM("Callback queue processed " <<
-                  num_callbacks_called << " callbacks out of " << num_callbacks_to_call);
-  ROS_INFO_STREAM("callOne() was called " << num_call_one_calls << " times.");
-  ROS_INFO_STREAM("ready() was called " << num_ready_called << " times.");
-
-  EXPECT_EQ(num_callbacks_called, queue_size);
-  EXPECT_LE(num_call_one_calls, 2 * num_callbacks_to_call + num_threads * (1/call_one_timeout.toSec()) * queue_size);
-}
-
-INSTANTIATE_TEST_CASE_P(slow, CallbackQueueParamTest, ::testing::Values(
-  //ThreadedCallOneSlowParams{callback_duration,      num_threads, call_one_timeout,       test_duration,        pause_between_callbacks}
-  ThreadedCallOneSlowParams{ros::WallDuration(1.0),   10,          ros::WallDuration(0.1), ros::WallDuration(2), ros::WallDuration(0)},
-  ThreadedCallOneSlowParams{ros::WallDuration(1.0),   10,          ros::WallDuration(0.1), ros::WallDuration(2), ros::WallDuration(0.1)},
-  ThreadedCallOneSlowParams{ros::WallDuration(1.0),   10,          ros::WallDuration(0.1), ros::WallDuration(2), ros::WallDuration(0.001)},
-  ThreadedCallOneSlowParams{ros::WallDuration(0.1),   10,          ros::WallDuration(0.1), ros::WallDuration(2), ros::WallDuration(0)},
-  ThreadedCallOneSlowParams{ros::WallDuration(0.001), 10,          ros::WallDuration(0.1), ros::WallDuration(2), ros::WallDuration(0)},
-  ThreadedCallOneSlowParams{ros::WallDuration(1.0),    1,          ros::WallDuration(0.1), ros::WallDuration(2), ros::WallDuration(0)},
-  ThreadedCallOneSlowParams{ros::WallDuration(1.0),    2,          ros::WallDuration(0.1), ros::WallDuration(2), ros::WallDuration(0)}
-  ));
-
 // this class is just an ugly hack
 // to access the constructor Timer(TimerOptions)
 namespace ros
@@ -527,11 +384,10 @@ TEST(CallbackQueue, recursiveTimer)
 
   boost::thread_group tg;
   bool done = false;
-  boost::atomic<size_t> calls(0);
 
   for (uint32_t i = 0; i < 2; ++i)
   {
-    tg.create_thread(boost::bind(callOneThread, &queue, boost::ref(done), &calls, ros::WallDuration(0.1)));
+    tg.create_thread(boost::bind(callOneThread, &queue, boost::ref(done)));
   }
 
   while (!queue.isEmpty())
diff --git b/test/test_roscpp/test/test_subscription_queue.cpp a/test/test_roscpp/test/test_subscription_queue.cpp
index a19cccd41..9af94a2c4 100644
--- b/test/test_roscpp/test/test_subscription_queue.cpp
+++ a/test/test_roscpp/test/test_subscription_queue.cpp
@@ -44,10 +44,59 @@
 #include <boost/bind.hpp>
 #include <boost/thread.hpp>
 
-#include "fake_message.h"
-
 using namespace ros;
 
+class FakeMessage
+{
+public:
+  virtual const std::string __getDataType() const { return ""; }
+  virtual const std::string __getMD5Sum() const { return ""; }
+  virtual const std::string __getMessageDefinition() const { return ""; }
+  virtual uint32_t serializationLength() const { return 0; }
+  virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const { (void)seq; return write_ptr; }
+  virtual uint8_t *deserialize(uint8_t *read_ptr) { return read_ptr; }
+};
+
+class FakeSubHelper : public SubscriptionCallbackHelper
+{
+public:
+  FakeSubHelper()
+  : calls_(0)
+  {}
+
+  virtual VoidConstPtr deserialize(const SubscriptionCallbackHelperDeserializeParams&)
+  {
+    return boost::make_shared<FakeMessage>();
+  }
+
+  virtual std::string getMD5Sum() { return ""; }
+  virtual std::string getDataType() { return ""; }
+
+  virtual void call(SubscriptionCallbackHelperCallParams& params)
+  {
+    (void)params;
+    {
+      boost::mutex::scoped_lock lock(mutex_);
+      ++calls_;
+    }
+
+    if (cb_)
+    {
+      cb_();
+    }
+  }
+
+  virtual const std::type_info& getTypeInfo() { return typeid(FakeMessage); }
+  virtual bool isConst() { return true; }
+  virtual bool hasHeader() { return false; }
+
+  boost::mutex mutex_;
+  int32_t calls_;
+
+  boost::function<void(void)> cb_;
+};
+typedef boost::shared_ptr<FakeSubHelper> FakeSubHelperPtr;
+
 TEST(SubscriptionQueue, queueSize)
 {
   SubscriptionQueue queue("blah", 1, false);
@@ -78,7 +127,7 @@ TEST(SubscriptionQueue, queueSize)
   ASSERT_EQ(queue.call(), CallbackInterface::Success);
   ASSERT_EQ(queue.call(), CallbackInterface::Invalid);
 
-  ASSERT_EQ(helper->calls_, 2u);
+  ASSERT_EQ(helper->calls_, 2);
 }
 
 TEST(SubscriptionQueue, infiniteQueue)
@@ -109,7 +158,7 @@ TEST(SubscriptionQueue, infiniteQueue)
 
   ASSERT_EQ(queue.call(), CallbackInterface::Invalid);
 
-  ASSERT_EQ(helper->calls_, 10001u);
+  ASSERT_EQ(helper->calls_, 10001);
 }
 
 TEST(SubscriptionQueue, clearCall)
@@ -205,7 +254,7 @@ TEST(SubscriptionQueue, concurrentCallbacks)
   t1.join();
   t2.join();
 
-  ASSERT_EQ(helper->calls_, 2u);
+  ASSERT_EQ(helper->calls_, 2);
 }
 
 void waitForASecond()
@@ -227,9 +276,9 @@ TEST(SubscriptionQueue, nonConcurrentOrdering)
   t1.join();
   t2.join();
 
-  ASSERT_EQ(helper->calls_, 1u);
+  ASSERT_EQ(helper->calls_, 1);
   queue.call();
-  ASSERT_EQ(helper->calls_, 2u);
+  ASSERT_EQ(helper->calls_, 2);
 }
 
 int main(int argc, char** argv)
diff --git b/test/test_rosgraph/package.xml a/test/test_rosgraph/package.xml
index f31c136e2..b1d7f15e9 100644
--- b/test/test_rosgraph/package.xml
+++ a/test/test_rosgraph/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_rosgraph</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tests for rosgraph which depend on rostest.
   </description>
diff --git b/test/test_roslaunch/package.xml a/test/test_roslaunch/package.xml
index 6d7d54528..a4ebd9c7f 100644
--- b/test/test_roslaunch/package.xml
+++ a/test/test_roslaunch/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>test_roslaunch</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tests for roslaunch which depend on rostest.
   </description>
diff --git b/test/test_roslib_comm/package.xml a/test/test_roslib_comm/package.xml
index 52358ed33..e904cb841 100644
--- b/test/test_roslib_comm/package.xml
+++ a/test/test_roslib_comm/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_roslib_comm</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Unit tests verifying that roslib is operating as expected.
   </description>
diff --git b/test/test_rosmaster/package.xml a/test/test_rosmaster/package.xml
index 8a0daaa51..1562d5458 100644
--- b/test/test_rosmaster/package.xml
+++ a/test/test_rosmaster/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_rosmaster</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tests for rosmaster which depend on rostest.
   </description>
diff --git b/test/test_rosparam/package.xml a/test/test_rosparam/package.xml
index 312c988a6..1aff016d0 100644
--- b/test/test_rosparam/package.xml
+++ a/test/test_rosparam/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>test_rosparam</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     A package containing the unit tests for rosparam.
   </description>
diff --git b/test/test_rospy/package.xml a/test/test_rospy/package.xml
index 13a7780ed..c89d81847 100644
--- b/test/test_rospy/package.xml
+++ a/test/test_rospy/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>test_rospy</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rospy unit and integration test framework.
   </description>
diff --git b/test/test_rosservice/package.xml a/test/test_rosservice/package.xml
index ee6962669..b7a187c11 100644
--- b/test/test_rosservice/package.xml
+++ a/test/test_rosservice/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_rosservice</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tests for the rosservice tool.
   </description>
diff --git b/test/test_rostest/package.xml a/test/test_rostest/package.xml
index d78a0ab3c..4f54f0320 100644
--- b/test/test_rostest/package.xml
+++ a/test/test_rostest/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_rostest</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tests for rostest.
   </description>
diff --git b/test/test_rostopic/package.xml a/test/test_rostopic/package.xml
index 598a0df01..7537937bd 100644
--- b/test/test_rostopic/package.xml
+++ a/test/test_rostopic/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>test_rostopic</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tests for rostopic.
   </description>
diff --git b/tools/rosbag/CHANGELOG.rst a/tools/rosbag/CHANGELOG.rst
index 1f0d4a827..2af43d677 100644
--- b/tools/rosbag/CHANGELOG.rst
+++ a/tools/rosbag/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosbag
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 * fix bag migration failures caused by typo in connection_header assignment (`#1952 <https://github.com/ros/ros_comm/issues/1952>`_)
diff --git b/tools/rosbag/package.xml a/tools/rosbag/package.xml
index 0131385e4..51b903f59 100644
--- b/tools/rosbag/package.xml
+++ a/tools/rosbag/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>rosbag</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     This is a set of tools for recording from and playing back to ROS
     topics.  It is intended to be high performance and avoids
diff --git b/tools/rosbag_storage/CHANGELOG.rst a/tools/rosbag_storage/CHANGELOG.rst
index 36cf9d320..c78b573bd 100644
--- b/tools/rosbag_storage/CHANGELOG.rst
+++ a/tools/rosbag_storage/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosbag_storage
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 * fix brief description comments after members (`#1920 <https://github.com/ros/ros_comm/issues/1920>`_)
diff --git b/tools/rosbag_storage/package.xml a/tools/rosbag_storage/package.xml
index 016ba4750..9bfbeb9e6 100644
--- b/tools/rosbag_storage/package.xml
+++ a/tools/rosbag_storage/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rosbag_storage</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     This is a set of tools for recording from and playing back ROS
     message without relying on the ROS client library.
diff --git b/tools/rosgraph/CHANGELOG.rst a/tools/rosgraph/CHANGELOG.rst
index 991d5863a..ebf8a203e 100644
--- b/tools/rosgraph/CHANGELOG.rst
+++ a/tools/rosgraph/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosgraph
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rosgraph/package.xml a/tools/rosgraph/package.xml
index 1f001463e..8215272d6 100644
--- b/tools/rosgraph/package.xml
+++ a/tools/rosgraph/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
  <name>rosgraph</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rosgraph contains the rosgraph command-line tool, which prints
     information about the ROS Computation Graph. It also provides an
diff --git b/tools/roslaunch/CHANGELOG.rst a/tools/roslaunch/CHANGELOG.rst
index e25ce96a9..416abcba1 100644
--- b/tools/roslaunch/CHANGELOG.rst
+++ a/tools/roslaunch/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package roslaunch
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 * fix NameError in launch error handling (`#1965 <https://github.com/ros/ros_comm/issues/1965>`_)
diff --git b/tools/roslaunch/package.xml a/tools/roslaunch/package.xml
index 26dd2be40..bf47e59ad 100644
--- b/tools/roslaunch/package.xml
+++ a/tools/roslaunch/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>roslaunch</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     roslaunch is a tool for easily launching multiple ROS <a
     href="http://ros.org/wiki/Nodes">nodes</a> locally and remotely
diff --git b/tools/rosmaster/CHANGELOG.rst a/tools/rosmaster/CHANGELOG.rst
index f0b1b8f41..1e53c3eb7 100644
--- b/tools/rosmaster/CHANGELOG.rst
+++ a/tools/rosmaster/CHANGELOG.rst
@@ -2,10 +2,6 @@
 Changelog for package rosmaster
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-* add node name to shutdown message for duplicate nodes (`#1992 <https://github.com/ros/ros_comm/issues/1992>`_)
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rosmaster/package.xml a/tools/rosmaster/package.xml
index 26488885c..8a62fb835 100644
--- b/tools/rosmaster/package.xml
+++ a/tools/rosmaster/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>rosmaster</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     ROS <a href="http://ros.org/wiki/Master">Master</a> implementation.
   </description>
diff --git b/tools/rosmsg/CHANGELOG.rst a/tools/rosmsg/CHANGELOG.rst
index 751801e11..f91c34d3d 100644
--- b/tools/rosmsg/CHANGELOG.rst
+++ a/tools/rosmsg/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosmsg
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rosmsg/package.xml a/tools/rosmsg/package.xml
index 4707d7d19..4b3d800b5 100644
--- b/tools/rosmsg/package.xml
+++ a/tools/rosmsg/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>rosmsg</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rosmsg contains two command-line tools: <tt>rosmsg</tt> and
     <tt>rossrv</tt>. <tt>rosmsg</tt> is a command-line tool for
diff --git b/tools/rosnode/CHANGELOG.rst a/tools/rosnode/CHANGELOG.rst
index e8b8b3d3f..50684cae3 100644
--- b/tools/rosnode/CHANGELOG.rst
+++ a/tools/rosnode/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosnode
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rosnode/package.xml a/tools/rosnode/package.xml
index 5cccad85c..f374fb41c 100644
--- b/tools/rosnode/package.xml
+++ a/tools/rosnode/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rosnode</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rosnode is a command-line tool for displaying debug information
     about ROS <a href="http://wiki.ros.org/Nodes">Nodes</a>,
diff --git b/tools/rosout/CHANGELOG.rst a/tools/rosout/CHANGELOG.rst
index fc9ce3e66..a3dde0622 100644
--- b/tools/rosout/CHANGELOG.rst
+++ a/tools/rosout/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosout
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rosout/package.xml a/tools/rosout/package.xml
index 9b7f1636d..020d9fd04 100644
--- b/tools/rosout/package.xml
+++ a/tools/rosout/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rosout</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
      System-wide logging mechanism for messages sent to the /rosout topic.
   </description>
diff --git b/tools/rosparam/CHANGELOG.rst a/tools/rosparam/CHANGELOG.rst
index 947687c90..9e370a6b2 100644
--- b/tools/rosparam/CHANGELOG.rst
+++ a/tools/rosparam/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosparam
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rosparam/package.xml a/tools/rosparam/package.xml
index 36939f515..c1eb01c83 100644
--- b/tools/rosparam/package.xml
+++ a/tools/rosparam/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>rosparam</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rosparam contains the rosparam command-line tool for getting and
     setting ROS Parameters on the <a
diff --git b/tools/rosservice/CHANGELOG.rst a/tools/rosservice/CHANGELOG.rst
index aa92f7845..3681a15a1 100644
--- b/tools/rosservice/CHANGELOG.rst
+++ a/tools/rosservice/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rosservice
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rosservice/package.xml a/tools/rosservice/package.xml
index 54c1aed97..fce852f33 100644
--- b/tools/rosservice/package.xml
+++ a/tools/rosservice/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rosservice</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rosservice contains the rosservice command-line tool for listing
     and querying ROS <a
diff --git b/tools/rostest/CHANGELOG.rst a/tools/rostest/CHANGELOG.rst
index 4845bd6eb..6650ac3e0 100644
--- b/tools/rostest/CHANGELOG.rst
+++ a/tools/rostest/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rostest
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rostest/package.xml a/tools/rostest/package.xml
index cf8a791b2..c1b66267c 100644
--- b/tools/rostest/package.xml
+++ a/tools/rostest/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rostest</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
      Integration test suite based on roslaunch that is compatible with xUnit frameworks.
   </description>
diff --git b/tools/rostopic/CHANGELOG.rst a/tools/rostopic/CHANGELOG.rst
index 85254b9a2..809663529 100644
--- b/tools/rostopic/CHANGELOG.rst
+++ a/tools/rostopic/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package rostopic
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/tools/rostopic/package.xml a/tools/rostopic/package.xml
index 5bd7fd542..aec2065cf 100644
--- b/tools/rostopic/package.xml
+++ a/tools/rostopic/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rostopic</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     rostopic contains the rostopic command-line tool for displaying
     debug information about
diff --git b/tools/topic_tools/CHANGELOG.rst a/tools/topic_tools/CHANGELOG.rst
index 31f9420f2..4ea666534 100644
--- b/tools/topic_tools/CHANGELOG.rst
+++ a/tools/topic_tools/CHANGELOG.rst
@@ -2,10 +2,6 @@
 Changelog for package topic_tools
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-* add latch param to throttle (`#1944 <https://github.com/ros/ros_comm/issues/1944>`_)
-
 1.14.6 (2020-05-29)
 -------------------
 * avoid infinite recursion in rosrun tab completion when rosbash is not installed (`#1948 <https://github.com/ros/ros_comm/issues/1948>`_)
diff --git b/tools/topic_tools/package.xml a/tools/topic_tools/package.xml
index c5c5862b5..6d95c36a7 100644
--- b/tools/topic_tools/package.xml
+++ a/tools/topic_tools/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>topic_tools</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     Tools for directing, throttling, selecting, and otherwise messing with
     ROS topics at a meta level. None of the programs in this package actually
diff --git b/utilities/message_filters/CHANGELOG.rst a/utilities/message_filters/CHANGELOG.rst
index 085a09778..b2e713430 100644
--- b/utilities/message_filters/CHANGELOG.rst
+++ a/utilities/message_filters/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package message_filters
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/utilities/message_filters/package.xml a/utilities/message_filters/package.xml
index 0dc5bdbdc..3a3091254 100644
--- b/utilities/message_filters/package.xml
+++ a/utilities/message_filters/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>message_filters</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     A set of message filters which take in messages and may output those messages at a later time, based on the conditions that filter needs met.
   </description>
diff --git b/utilities/roslz4/CHANGELOG.rst a/utilities/roslz4/CHANGELOG.rst
index 0911588ff..7e3beac9e 100644
--- b/utilities/roslz4/CHANGELOG.rst
+++ a/utilities/roslz4/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package roslz4
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 * use undefined dynamic_lookup on macOS (`#1923 <https://github.com/ros/ros_comm/issues/1923>`_)
diff --git b/utilities/roslz4/package.xml a/utilities/roslz4/package.xml
index a83b0a7ed..74900cf5d 100644
--- b/utilities/roslz4/package.xml
+++ a/utilities/roslz4/package.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <package>
   <name>roslz4</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     A Python and C++ implementation of the LZ4 streaming format.  Large data
     streams are split into blocks which are compressed using the very fast LZ4
diff --git b/utilities/roswtf/CHANGELOG.rst a/utilities/roswtf/CHANGELOG.rst
index d1c14d1d0..465c7733f 100644
--- b/utilities/roswtf/CHANGELOG.rst
+++ a/utilities/roswtf/CHANGELOG.rst
@@ -2,9 +2,6 @@
 Changelog for package roswtf
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-
 1.14.6 (2020-05-29)
 -------------------
 
diff --git b/utilities/roswtf/package.xml a/utilities/roswtf/package.xml
index f37024ce3..556f4082d 100644
--- b/utilities/roswtf/package.xml
+++ a/utilities/roswtf/package.xml
@@ -4,7 +4,7 @@
   schematypens="http://www.w3.org/2001/XMLSchema"?>
 <package format="3">
   <name>roswtf</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
      roswtf is a tool for diagnosing issues with a running ROS system. Think of it as a FAQ implemented in code.
   </description>
diff --git b/utilities/xmlrpcpp/CHANGELOG.rst a/utilities/xmlrpcpp/CHANGELOG.rst
index 9286e04f2..190864ef6 100644
--- b/utilities/xmlrpcpp/CHANGELOG.rst
+++ a/utilities/xmlrpcpp/CHANGELOG.rst
@@ -2,10 +2,6 @@
 Changelog for package xmlrpcpp
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-1.14.7 (2020-07-31)
--------------------
-* add const versions of XmlRpcValue converting operators (`#1978 <https://github.com/ros/ros_comm/issues/1978>`_)
-
 1.14.6 (2020-05-29)
 -------------------
 * check if enough FDs are free, instead counting the total free FDs (`#1929 <https://github.com/ros/ros_comm/issues/1929>`_)
diff --git b/utilities/xmlrpcpp/package.xml a/utilities/xmlrpcpp/package.xml
index 662b0a6e2..2c05c0ccf 100644
--- b/utilities/xmlrpcpp/package.xml
+++ a/utilities/xmlrpcpp/package.xml
@@ -1,6 +1,6 @@
 <package format="2">
   <name>xmlrpcpp</name>
-  <version>1.14.7</version>
+  <version>1.14.6</version>
   <description>
     XmlRpc++ is a C++ implementation of the XML-RPC protocol. This version is
     heavily modified from the package available on SourceForge in order to
